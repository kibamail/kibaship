apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: tekton-task-git-clone-kibaship-com
  annotations:
    tekton.dev/displayName: "Simple Git Clone with Token"
    platform.kibaship.com/created-by: "kibaship"
spec:
  description: >-
    A simplified git clone task that can clone from public repositories
    or use an access token from a secret for private repositories.
  workspaces:
    - name: output
      description: The git repo will be cloned into this workspace.
  params:
    - name: url
      description: Repository URL to clone from.
      type: string
    - name: branch
      description: Branch name to checkout (required).
      type: string
    - name: commit
      description: Specific commit hash to checkout (required).
      type: string
    - name: token-secret
      description: Name of the secret containing the access token (optional for public repos).
      type: string
      default: ""
    - name: public-access
      description: Whether the repository is publicly accessible (true/false).
      type: string
      default: "false"
  results:
    - name: commit
      description: The commit SHA that was checked out.
    - name: url
      description: The repository URL that was cloned.
  steps:
    - name: clone
      image: alpine/git:latest
      env:
        - name: REPO_URL
          value: $(params.url)
        - name: BRANCH_NAME
          value: $(params.branch)
        - name: COMMIT_HASH
          value: $(params.commit)
        - name: PUBLIC_ACCESS
          value: $(params.public-access)
        - name: TOKEN_SECRET_NAME
          value: $(params.token-secret)
        - name: WORKSPACE_PATH
          value: $(workspaces.output.path)
      script: |
        #!/bin/sh
        set -e

        echo "Starting git clone..."
        echo "Repository: $REPO_URL"
        echo "Public Access: $PUBLIC_ACCESS"

        # Determine the URL to use based on public access
        if [ "$PUBLIC_ACCESS" = "true" ]; then
          echo "Using public access (no authentication)"
          CLONE_URL="$REPO_URL"
        else
          echo "Using private access with token"
          if [ -z "$TOKEN_SECRET_NAME" ] || [ "$TOKEN_SECRET_NAME" = "" ]; then
            echo "Error: Private repository requires token-secret parameter"
            exit 1
          fi

          # For private repos, try to read ACCESS_TOKEN from secret file
          # The Tekton task runner will mount secrets automatically
          ACCESS_TOKEN=""

          # Try to find the token in common Tekton secret mount locations
          if [ -f "/tekton/creds/$TOKEN_SECRET_NAME/token" ]; then
            ACCESS_TOKEN=$(cat "/tekton/creds/$TOKEN_SECRET_NAME/token")
          elif [ -f "/workspace/git-credentials/token" ]; then
            ACCESS_TOKEN=$(cat "/workspace/git-credentials/token")
          else
            echo "Error: Could not find access token for private repository"
            echo "Expected locations:"
            echo "  /tekton/creds/$TOKEN_SECRET_NAME/token"
            echo "  /workspace/git-credentials/token"
            exit 1
          fi

          # Create authenticated URL by injecting token
          CLONE_URL=$(echo "$REPO_URL" | sed "s|https://|https://x-access-token:${ACCESS_TOKEN}@|")
        fi

        # Clone the repository with the specific branch
        git clone --branch "$BRANCH_NAME" --single-branch "$CLONE_URL" "$WORKSPACE_PATH/repo"

        # Navigate to the cloned repository
        cd "$WORKSPACE_PATH/repo"

        # Silence detached HEAD advice
        git config --global advice.detachedHead false


        # Checkout the specific commit
        git checkout "$COMMIT_HASH"

        # Verify we're on the correct commit
        ACTUAL_COMMIT=$(git rev-parse HEAD)
        if [ "$ACTUAL_COMMIT" != "$COMMIT_HASH" ]; then
          echo "Error: Expected commit $COMMIT_HASH but got $ACTUAL_COMMIT"
          exit 1
        fi

        echo "Successfully cloned $REPO_URL at commit $COMMIT_HASH"

        # Write results
        echo -n "$COMMIT_HASH" > $(results.commit.path)
        echo -n "$REPO_URL" > $(results.url.path)
