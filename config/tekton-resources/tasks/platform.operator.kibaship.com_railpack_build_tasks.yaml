apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: tekton-task-railpack-build-kibaship-com
  annotations:
    tekton.dev/displayName: "Railpack Build and Push"
    platform.kibaship.com/created-by: "kibaship-operator"
  labels:
    app.kubernetes.io/part-of: kibaship-operator
spec:
  description: |
    Build an OCI image using BuildKit gateway with the Railpack frontend, based on the
    plan generated by the railpack-prepare task. The image is pushed to the registry.
  params:
    - name: contextPath
      type: string
      description: Relative path to the project root within the repo workspace (same as prepare)
      default: "."
    - name: railpackFrontendSource
      type: string
      description: Railpack frontend gateway source for BuildKit (pin to CLI version)
      default: "ghcr.io/railwayapp/railpack-frontend:v0.7.2"
    - name: imageTag
      type: string
      description: Full image tag to push (e.g., registry.registry.svc.cluster.local/namespace/app-uuid:deployment-uuid)
    - name: buildImage
      type: string
      description: Image for buildctl client (for kustomize override convenience)
      default: "ghcr.io/kibamail/kibaship-railpack-build:0.1.0"
  workspaces:
    - name: output
      description: Shared workspace containing the cloned repository and plan
    - name: docker-config
      description: Docker config for registry authentication
      optional: true
    - name: registry-ca
      description: Registry CA certificate for TLS trust
      optional: true
  results:
    - name: buildOutput
      description: Full image tag that was pushed
    - name: imageDigest
      description: Image digest (SHA256)
  stepTemplate:
    env:
      - name: BUILDKIT_HOST
        value: tcp://buildkitd.buildkit.svc:1234
      - name: DOCKER_CONFIG
        value: /workspace/docker-config
  steps:
    - name: build
      image: $(params.buildImage)
      workingDir: $(workspaces.output.path)
      script: |
        #!/usr/bin/env sh
        set -eu

        PLAN_DIR="$(workspaces.output.path)/railpack"
        PLAN="$PLAN_DIR/railpack-plan.json"
        CONTEXT_DIR="$(workspaces.output.path)/repo/$(params.contextPath)"

        if [ ! -f "$PLAN" ]; then
          echo "railpack-plan.json not found at $PLAN" >&2
          exit 1
        fi
        if [ ! -d "$CONTEXT_DIR" ]; then
          echo "context directory not found at $CONTEXT_DIR" >&2
          exit 1
        fi

        echo "Building and pushing image to $(params.imageTag)..."

        # Use BuildKit gateway with Railpack frontend; push to registry
        buildctl build \
          --progress=plain \
          --local context="$CONTEXT_DIR" \
          --local dockerfile="$PLAN_DIR" \
          --frontend=gateway.v0 \
          --opt source=$(params.railpackFrontendSource) \
          --output type=image,name=$(params.imageTag),push=true

        # Emit image tag as result
        printf "%s" "$(params.imageTag)" > "$(results.buildOutput.path)"

        # TODO: Extract and emit image digest
        echo "" > "$(results.imageDigest.path)"
