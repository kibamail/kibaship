apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: tekton-task-railpack-build-kibaship-com
  annotations:
    tekton.dev/displayName: "Railpack Build"
    platform.kibaship.com/created-by: "kibaship-operator"
  labels:
    app.kubernetes.io/part-of: kibaship-operator
spec:
  description: |
    Build an OCI image using BuildKit gateway with the Railpack frontend, based on the
    plan generated by the railpack-prepare task. The image is exported as an OCI archive
    at the provided output path under the shared workspace.
  params:
    - name: contextPath
      type: string
      description: Relative path to the project root within the repo workspace (same as prepare)
      default: "."
    - name: railpackFrontendSource
      type: string
      description: Railpack frontend gateway source for BuildKit (pin to CLI version)
      default: "ghcr.io/railwayapp/railpack-frontend:v0.7.2"
    - name: outputPath
      type: string
      description: Output OCI archive path relative to workspace root
      default: "railpack/build/image.oci"
    - name: buildImage
      type: string
      description: Image for buildctl client (for kustomize override convenience)
      default: "ghcr.io/kibamail/kibaship-railpack-build:0.1.0"
  workspaces:
    - name: output
      description: Shared workspace containing the cloned repository and plan
  results:
    - name: buildOutput
      description: Absolute path to the generated OCI archive
  sidecars:
    - name: buildkitd
      image: moby/buildkit:latest
      args: ["--addr", "tcp://0.0.0.0:1234"]
      securityContext:
        privileged: true
        seccompProfile:
          type: Unconfined
      ports:
        - containerPort: 1234
  stepTemplate:
    env:
      - name: BUILDKIT_HOST
        value: tcp://localhost:1234
  steps:
    - name: build
      image: $(params.buildImage)
      workingDir: $(workspaces.output.path)
      script: |
        #!/usr/bin/env sh
        set -eu
        PLAN_DIR="$(workspaces.output.path)/railpack"
        PLAN="$PLAN_DIR/plan.json"
        CONTEXT_DIR="$(workspaces.output.path)/repo/$(params.contextPath)"
        DEST="$(workspaces.output.path)/$(params.outputPath)"
        mkdir -p "$(dirname "$DEST")"
        if [ ! -f "$PLAN" ]; then
          echo "plan.json not found at $PLAN" >&2
          exit 1
        fi
        if [ ! -d "$CONTEXT_DIR" ]; then
          echo "context directory not found at $CONTEXT_DIR" >&2
          exit 1
        fi
        # Use BuildKit gateway with Railpack frontend; provide local context. The frontend looks for plan.json in --local dockerfile.
        buildctl build \
          --progress=plain \
          --local context="$CONTEXT_DIR" \
          --local dockerfile="$PLAN_DIR" \
          --frontend=gateway.v0 \
          --opt source=$(params.railpackFrontendSource) \
          --output type=oci,dest="$DEST"
        # Emit result
        printf "%s" "$DEST" > "$(results.buildOutput.path)"
