apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: tekton-task-railpack-prepare-kibaship-com
  annotations:
    tekton.dev/displayName: "Railpack Prepare"
    platform.kibaship.com/created-by: "kibaship-operator"
  labels:
    app.kubernetes.io/part-of: kibaship-operator
spec:
  description: |
    Generate Railpack build plan and info without building the image. The outputs
    are written into the shared workspace at /railpack/railpack-plan.json and /railpack/info.json.
  params:
    - name: contextPath
      type: string
      description: Relative path to the project root within the workspace
      default: "."
    - name: railpackVersion
      type: string
      description: Railpack CLI version (image tag)
      default: "0.1.2"
    - name: envArgs
      type: string
      description: Additional args to pass to railpack prepare, e.g. "--env FOO=bar --env BAZ=qux"
      default: ""
  workspaces:
    - name: output
      description: Shared workspace containing the cloned repository
  results:
    - name: plan
      description: Absolute path to the generated railpack-plan.json in the workspace
    - name: info
      description: Absolute path to the generated railpack-info.json in the workspace
  steps:
    - name: prepare
      image: ghcr.io/kibamail/kibaship-railpack-cli:$(params.railpackVersion)
      workingDir: $(workspaces.output.path)/repo/$(params.contextPath)
      script: |
        #!/usr/bin/env sh
        set -eu
        # Ensure output directory exists at the workspace root
        mkdir -p "$(workspaces.output.path)/railpack"
        PLAN="$(workspaces.output.path)/railpack/railpack-plan.json"
        INFO="$(workspaces.output.path)/railpack/railpack-info.json"

        # Collect optional args to pass to prepare (string)
        ENV_ARGS='$(params.envArgs)'

        # Generate plan and info at the required paths
        railpack prepare . \
          --plan-out "$PLAN" \
          --info-out "$INFO" \
          $ENV_ARGS

        # Emit Tekton results with absolute file paths
        printf "%s" "$PLAN" > "$(results.plan.path)"
        printf "%s" "$INFO" > "$(results.info.path)"
