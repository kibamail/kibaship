name: CI/CD

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:

env:
  REGISTRY: ghcr.io
  CLI_NAME: kibaship

jobs:
  # Phase 1: Run tests in parallel
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run linter
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.1.0

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run unit tests
        run: |
          go mod tidy
          make test

  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Install Kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/latest/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Verify Kind installation
        run: kind version

      - name: Run E2E tests
        run: |
          go mod tidy
          make test-e2e

  # Phase 2: Build and push all images to prerelease tags (if all tests pass)
  build-images:
    name: Build Images
    runs-on: ubuntu-latest
    needs: [lint, test, test-e2e]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: true
      matrix:
        image:
          - name: kibaship-operator
            context: .
            file: Dockerfile
          - name: kibaship-operator-apiserver
            context: .
            file: Dockerfile.apiserver
          - name: kibaship-operator-cert-manager-webhook
            context: webhooks/cert-manager-kibaship-webhook
            file: webhooks/cert-manager-kibaship-webhook/Dockerfile
          - name: kibaship-operator-registry-auth
            context: .
            file: Dockerfile.registry-auth
          - name: kibaship-railpack-cli
            context: build/railpack-cli
            file: build/railpack-cli/Dockerfile
          - name: kibaship-railpack-build
            context: build/railpack-build
            file: build/railpack-build/Dockerfile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for prerelease tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/kibamail/${{ matrix.image.name }}
          tags: |
            type=ref,event=branch,suffix=-prerelease
            type=ref,event=pr,suffix=-prerelease
            type=semver,pattern={{version}},suffix=-prerelease
            type=semver,pattern={{major}}.{{minor}},suffix=-prerelease
            type=semver,pattern={{major}},suffix=-prerelease
            type=sha,format=short,prefix=sha-,suffix=-prerelease

      - name: Build and push to prerelease tags
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.image.context }}
          file: ${{ matrix.image.file }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Phase 3: Promote prerelease tags to final tags (only if ALL builds succeeded)
  promote-images:
    name: Promote Images to Release
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Promote all images from prerelease to release
        env:
          IMAGES: |
            kibaship-operator
            kibaship-operator-apiserver
            kibaship-operator-cert-manager-webhook
            kibaship-operator-registry-auth
            kibaship-railpack-cli
            kibaship-railpack-build
        run: |
          # Determine source and target tags based on trigger
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION_NO_V="${VERSION#v}"
            MAJOR=$(echo "$VERSION_NO_V" | cut -d. -f1)
            MINOR=$(echo "$VERSION_NO_V" | cut -d. -f1-2)

            PRERELEASE_TAGS=(
              "${VERSION}-prerelease"
              "${MAJOR}.${MINOR}-prerelease"
              "${MAJOR}-prerelease"
            )
            RELEASE_TAGS=(
              "${VERSION}"
              "${MAJOR}.${MINOR}"
              "${MAJOR}"
              "latest"
            )
          else
            BRANCH_NAME="${{ github.ref_name }}"
            PRERELEASE_TAGS=("${BRANCH_NAME}-prerelease")
            RELEASE_TAGS=("${BRANCH_NAME}")
          fi

          # Promote each image
          for image_name in $IMAGES; do
            echo "===> Promoting $image_name"

            SOURCE_TAG="${PRERELEASE_TAGS[0]}"
            SOURCE_IMAGE="${{ env.REGISTRY }}/kibamail/${image_name}:${SOURCE_TAG}"

            echo "Pulling source: $SOURCE_IMAGE"
            docker pull "$SOURCE_IMAGE"

            # Tag and push all release versions
            for release_tag in "${RELEASE_TAGS[@]}"; do
              TARGET_IMAGE="${{ env.REGISTRY }}/kibamail/${image_name}:${release_tag}"
              echo "Tagging as: $TARGET_IMAGE"
              docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE"
              docker push "$TARGET_IMAGE"
            done

            echo "Successfully promoted $image_name"
          done

  # Phase 4: Release jobs (only on version tags, after successful push)
  release-cli:
    name: Release CLI Binaries
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [lint, test, test-e2e]
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Derive tag name and version
        id: version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build CLI binaries for multiple platforms
        run: |
          mkdir -p dist
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/${{ env.CLI_NAME }}-linux-amd64 ./cmd/cli
          GOOS=linux GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/${{ env.CLI_NAME }}-linux-arm64 ./cmd/cli
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/${{ env.CLI_NAME }}-darwin-amd64 ./cmd/cli
          GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/${{ env.CLI_NAME }}-darwin-arm64 ./cmd/cli
          GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/${{ env.CLI_NAME }}-windows-amd64.exe ./cmd/cli
          chmod +x dist/${{ env.CLI_NAME }}-*

      - name: Generate checksums
        run: |
          cd dist
          sha256sum ${{ env.CLI_NAME }}-* > checksums.txt
          cat checksums.txt

      - name: Upload CLI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cli-binaries
          path: |
            dist/${{ env.CLI_NAME }}-*
            dist/checksums.txt

  release-operator:
    name: Release Operator Manifests
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [promote-images]
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Derive tag name and version
        id: version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Generate deployment manifests
        run: |
          make build-installer \
            IMG=${{ env.REGISTRY }}/kibamail/kibaship-operator:v${{ steps.version.outputs.version }} \
            IMG_APISERVER=${{ env.REGISTRY }}/kibamail/kibaship-operator-apiserver:v${{ steps.version.outputs.version }} \
            IMG_CERT_MANAGER_WEBHOOK=${{ env.REGISTRY }}/kibamail/kibaship-operator-cert-manager-webhook:v${{ steps.version.outputs.version }} \
            IMG_REGISTRY_AUTH=${{ env.REGISTRY }}/kibamail/kibaship-operator-registry-auth:v${{ steps.version.outputs.version }}

      - name: Upload deployment manifests
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifests
          path: dist/install.yaml

      - name: Download CLI artifacts
        uses: actions/download-artifact@v4
        with:
          name: cli-binaries
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          name: KibaShip ${{ steps.version.outputs.tag_name }}
          files: |
            dist/install.yaml
            dist/${{ env.CLI_NAME }}-linux-amd64
            dist/${{ env.CLI_NAME }}-linux-arm64
            dist/${{ env.CLI_NAME }}-darwin-amd64
            dist/${{ env.CLI_NAME }}-darwin-arm64
            dist/${{ env.CLI_NAME }}-windows-amd64.exe
            dist/checksums.txt
          body: |
            ## KibaShip ${{ steps.version.outputs.tag_name }}

            ### Operator Installation

            Deploy the operator to your Kubernetes cluster:

            ```bash
            kubectl apply -f https://github.com/kibamail/kibaship-operator/releases/download/${{ steps.version.outputs.tag_name }}/install.yaml
            ```

            ### Configuration

            Create the required ConfigMap with your configuration:

            ```bash
            kubectl create configmap kibaship-operator-config \
              -n kibaship-operator \
              --from-literal=KIBASHIP_OPERATOR_DOMAIN=your-domain.com \
              --from-literal=KIBASHIP_ACME_EMAIL=acme@your-domain.com \
              --from-literal=WEBHOOK_TARGET_URL=https://webhook.your-domain.com
            ```

            ### Container Images

            The following container images are available for this release:
            - `ghcr.io/kibamail/kibaship-operator:${{ steps.version.outputs.tag_name }}`
            - `ghcr.io/kibamail/kibaship-operator-apiserver:${{ steps.version.outputs.tag_name }}`
            - `ghcr.io/kibamail/kibaship-operator-cert-manager-webhook:${{ steps.version.outputs.tag_name }}`
            - `ghcr.io/kibamail/kibaship-operator-registry-auth:${{ steps.version.outputs.tag_name }}`
            - `ghcr.io/kibamail/kibaship-railpack-cli:${{ steps.version.outputs.tag_name }}`
            - `ghcr.io/kibamail/kibaship-railpack-build:${{ steps.version.outputs.tag_name }}`

            ### CLI Tool

            Download the KibaShip CLI for local cluster management:

            **Linux (AMD64)**
            ```bash
            curl -L -o kibaship https://github.com/kibamail/kibaship-operator/releases/download/${{ steps.version.outputs.tag_name }}/kibaship-linux-amd64
            chmod +x kibaship
            sudo mv kibaship /usr/local/bin/
            ```

            **Linux (ARM64)**
            ```bash
            curl -L -o kibaship https://github.com/kibamail/kibaship-operator/releases/download/${{ steps.version.outputs.tag_name }}/kibaship-linux-arm64
            chmod +x kibaship
            sudo mv kibaship /usr/local/bin/
            ```

            **macOS (Intel)**
            ```bash
            curl -L -o kibaship https://github.com/kibamail/kibaship-operator/releases/download/${{ steps.version.outputs.tag_name }}/kibaship-darwin-amd64
            chmod +x kibaship
            sudo mv kibaship /usr/local/bin/
            ```

            **macOS (Apple Silicon)**
            ```bash
            curl -L -o kibaship https://github.com/kibamail/kibaship-operator/releases/download/${{ steps.version.outputs.tag_name }}/kibaship-darwin-arm64
            chmod +x kibaship
            sudo mv kibaship /usr/local/bin/
            ```

            **Windows (AMD64)**
            ```powershell
            curl -L -o kibaship.exe https://github.com/kibamail/kibaship-operator/releases/download/${{ steps.version.outputs.tag_name }}/kibaship-windows-amd64.exe
            ```

            ### Verification

            Verify the downloaded CLI binary with checksums:
            ```bash
            curl -L -o checksums.txt https://github.com/kibamail/kibaship-operator/releases/download/${{ steps.version.outputs.tag_name }}/checksums.txt
            sha256sum -c checksums.txt --ignore-missing
            ```

            ### What's in this release

            **CLI Tool:**
            - Create and destroy development clusters
            - Install required infrastructure (Cilium, Cert-Manager, Tekton, etc.)
            - Manage cluster lifecycle

            Version: `${{ steps.version.outputs.version }}`
          generate_release_notes: true
