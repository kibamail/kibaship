name: CI/CD

# Two-Phase Docker Hub Rollout Strategy:
# Phase 1: Build and push all images with v-<tag>-prerelease tags
# Phase 2: If ALL prerelease builds succeed, promote to v-<tag> release tags
# If ANY build fails, the promotion phase will detect missing images and abort
# This ensures atomic rollouts - either all images are promoted or none are

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:

env:
  REGISTRY: docker.io
  CLI_NAME: kibaship
  DOCKER_HUB_USERNAME: kibamail

jobs:
  # Phase 1: Run tests in parallel
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run linter
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.1.0

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run unit tests
        run: |
          go mod tidy
          make test

  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Install Kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/latest/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Verify Kind installation
        run: kind version

      - name: Run E2E tests
        run: |
          go mod tidy
          make test-e2e

  # Phase 2: Build and push all images to prerelease tags (if all tests pass)
  build-images:
    name: Build Images
    runs-on: ubuntu-latest
    needs: [lint, test, test-e2e]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: true
      matrix:
        image:
          - name: kibaship
            context: .
            file: Dockerfile
          - name: kibaship-apiserver
            context: .
            file: Dockerfile.apiserver
          - name: kibaship-registry-auth
            context: .
            file: Dockerfile.registry-auth
          - name: kibaship-railpack-cli
            context: build/railpack-cli
            file: build/railpack-cli/Dockerfile
          - name: kibaship-railpack-build
            context: build/railpack-build
            file: build/railpack-build/Dockerfile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata for prerelease tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/${{ matrix.image.name }}
          tags: |
            type=ref,event=branch,prefix=v-,suffix=-prerelease
            type=ref,event=pr,prefix=v-,suffix=-prerelease
            type=semver,pattern=v-{{version}},suffix=-prerelease
            type=sha,format=short,prefix=v-sha-,suffix=-prerelease

      - name: Show tags that will be pushed
        run: |
          echo "Tags to be created:"
          echo "${{ steps.meta.outputs.tags }}"
          echo ""
          echo "Image name: ${{ matrix.image.name }}"

      - name: Build and push to prerelease tags
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.image.context }}
          file: ${{ matrix.image.file }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: false

      - name: Verify image was pushed to registry
        run: |
          echo "Verifying pushed images for ${{ matrix.image.name }}"
          echo "Tags that were pushed:"
          echo "${{ steps.meta.outputs.tags }}"
          echo ""

          # Get the first tag and verify it exists in the registry
          FIRST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Checking if $FIRST_TAG exists in registry..."

          # Use docker buildx imagetools to inspect the pushed image
          if docker buildx imagetools inspect "$FIRST_TAG"; then
            echo "‚úÖ Successfully verified image was pushed to Docker Hub"
          else
            echo "‚ùå ERROR: Failed to verify image in Docker Hub!"
            echo "The build reported success but the image is not accessible"
            echo "This will cause the promotion phase to fail."
            exit 1
          fi

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "üßπ Build failed for ${{ matrix.image.name }}"
          echo "Prerelease images may be partially pushed."
          echo "The promotion phase will detect missing images and abort."
          echo "Manual cleanup of prerelease tags may be required."

  # Phase 3: Promote prerelease tags to final tags (only if ALL builds succeeded)
  promote-images:
    name: Promote Images to Release
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Verify all prerelease images exist before promotion
        env:
          IMAGES: |
            kibaship
            kibaship-apiserver
            kibaship-registry-auth
            kibaship-railpack-cli
            kibaship-railpack-build
        run: |
          set -e

          # Determine prerelease tag
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION_NO_V="${VERSION#v}"  # Remove 'v' prefix
            PRERELEASE_TAG="v-${VERSION_NO_V}-prerelease"
          else
            BRANCH_NAME="${{ github.ref_name }}"
            PRERELEASE_TAG="v-${BRANCH_NAME}-prerelease"
          fi

          echo "Verifying all prerelease images exist with tag: $PRERELEASE_TAG"

          MISSING_IMAGES=()

          for image_name in $IMAGES; do
            IMAGE="${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/${image_name}:${PRERELEASE_TAG}"
            echo "Checking: $IMAGE"

            if docker buildx imagetools inspect "$IMAGE" >/dev/null 2>&1; then
              echo "‚úÖ Found: $IMAGE"
            else
              echo "‚ùå Missing: $IMAGE"
              MISSING_IMAGES+=("$image_name")
            fi
          done

          if [ ${#MISSING_IMAGES[@]} -gt 0 ]; then
            echo ""
            echo "‚ùå PROMOTION ABORTED: Missing prerelease images:"
            printf '%s\n' "${MISSING_IMAGES[@]}"
            echo ""
            echo "All prerelease images must exist before promotion can proceed."
            exit 1
          else
            echo ""
            echo "‚úÖ All prerelease images verified. Proceeding with promotion..."
          fi

      - name: Promote all images from prerelease to release
        env:
          IMAGES: |
            kibaship
            kibaship-apiserver
            kibaship-registry-auth
            kibaship-railpack-cli
            kibaship-railpack-build
        run: |
          set -e  # Exit on any error

          # Track failed promotions for rollback
          FAILED_IMAGES=()
          PROMOTED_IMAGES=()

          # Determine source and target tags based on trigger
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION_NO_V="${VERSION#v}"  # Remove 'v' prefix

            PRERELEASE_TAG="v-${VERSION_NO_V}-prerelease"
            RELEASE_TAGS=(
              "v-${VERSION_NO_V}"
              "latest"
            )
          else
            BRANCH_NAME="${{ github.ref_name }}"
            PRERELEASE_TAG="v-${BRANCH_NAME}-prerelease"
            RELEASE_TAGS=("v-${BRANCH_NAME}")
          fi

          echo "Source prerelease tag: $PRERELEASE_TAG"
          echo "Target release tags: ${RELEASE_TAGS[*]}"

          # Function to rollback promoted images
          rollback_images() {
            echo "üîÑ Rolling back promoted images..."
            for image_name in "${PROMOTED_IMAGES[@]}"; do
              echo "Rolling back $image_name"
              for release_tag in "${RELEASE_TAGS[@]}"; do
                TARGET_IMAGE="${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/${image_name}:${release_tag}"
                echo "Attempting to delete: $TARGET_IMAGE"
                # Note: Docker Hub doesn't support programmatic tag deletion via API easily
                # This would require additional tooling or manual intervention
                echo "‚ö†Ô∏è  Manual cleanup required for: $TARGET_IMAGE"
              done
            done
          }

          # Promote each image
          for image_name in $IMAGES; do
            echo "===> Promoting $image_name"

            SOURCE_IMAGE="${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/${image_name}:${PRERELEASE_TAG}"

            echo "Pulling source: $SOURCE_IMAGE"
            if ! docker pull "$SOURCE_IMAGE"; then
              echo "‚ùå ERROR: Failed to pull prerelease image: $SOURCE_IMAGE"
              FAILED_IMAGES+=("$image_name")
              continue
            fi

            # Tag and push all release versions
            IMAGE_PROMOTION_FAILED=false
            for release_tag in "${RELEASE_TAGS[@]}"; do
              TARGET_IMAGE="${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/${image_name}:${release_tag}"
              echo "Tagging as: $TARGET_IMAGE"

              if ! docker tag "$SOURCE_IMAGE" "$TARGET_IMAGE"; then
                echo "‚ùå ERROR: Failed to tag image: $TARGET_IMAGE"
                IMAGE_PROMOTION_FAILED=true
                break
              fi

              if ! docker push "$TARGET_IMAGE"; then
                echo "‚ùå ERROR: Failed to push image: $TARGET_IMAGE"
                IMAGE_PROMOTION_FAILED=true
                break
              fi

              echo "‚úÖ Successfully pushed: $TARGET_IMAGE"
            done

            if [ "$IMAGE_PROMOTION_FAILED" = true ]; then
              FAILED_IMAGES+=("$image_name")
              echo "‚ùå Failed to promote $image_name"
            else
              PROMOTED_IMAGES+=("$image_name")
              echo "‚úÖ Successfully promoted $image_name"
            fi
          done

          # Check if any promotions failed
          if [ ${#FAILED_IMAGES[@]} -gt 0 ]; then
            echo ""
            echo "‚ùå PROMOTION FAILED for the following images:"
            printf '%s\n' "${FAILED_IMAGES[@]}"
            echo ""
            echo "Successfully promoted images:"
            printf '%s\n' "${PROMOTED_IMAGES[@]}"
            echo ""
            rollback_images
            echo ""
            echo "‚ùå Rollout failed. Manual cleanup may be required."
            exit 1
          else
            echo ""
            echo "‚úÖ ALL IMAGES SUCCESSFULLY PROMOTED!"
            echo "Promoted images:"
            printf '%s\n' "${PROMOTED_IMAGES[@]}"
            echo ""
            echo "üéâ Two-phase rollout completed successfully!"
          fi

  # Cleanup job for failed rollouts (manual trigger)
  cleanup-prerelease:
    name: Cleanup Prerelease Tags
    runs-on: ubuntu-latest
    if: failure() && (github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')))
    needs: [promote-images]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Cleanup prerelease tags
        env:
          IMAGES: |
            kibaship
            kibaship-apiserver
            kibaship-registry-auth
            kibaship-railpack-cli
            kibaship-railpack-build
        run: |
          # Determine prerelease tag
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION="${{ github.ref_name }}"
            VERSION_NO_V="${VERSION#v}"  # Remove 'v' prefix
            PRERELEASE_TAG="v-${VERSION_NO_V}-prerelease"
          else
            BRANCH_NAME="${{ github.ref_name }}"
            PRERELEASE_TAG="v-${BRANCH_NAME}-prerelease"
          fi

          echo "‚ö†Ô∏è  CLEANUP: Attempting to clean up prerelease tags: $PRERELEASE_TAG"
          echo "Note: Docker Hub doesn't support programmatic tag deletion via standard tools."
          echo "Manual cleanup may be required through Docker Hub web interface."

          for image_name in $IMAGES; do
            IMAGE="${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/${image_name}:${PRERELEASE_TAG}"
            echo "Would clean up: $IMAGE"
            echo "Please manually delete this tag from Docker Hub if needed."
          done

  # Phase 4: Release jobs (only on version tags, after successful push)
  release-cli:
    name: Release CLI Binaries
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [lint, test, test-e2e]
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Derive tag name and version
        id: version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build CLI binaries for multiple platforms
        run: |
          mkdir -p dist
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/${{ env.CLI_NAME }}-linux-amd64 ./cmd/cli
          GOOS=linux GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/${{ env.CLI_NAME }}-linux-arm64 ./cmd/cli
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/${{ env.CLI_NAME }}-darwin-amd64 ./cmd/cli
          GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/${{ env.CLI_NAME }}-darwin-arm64 ./cmd/cli
          GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/${{ env.CLI_NAME }}-windows-amd64.exe ./cmd/cli
          chmod +x dist/${{ env.CLI_NAME }}-*

      - name: Generate checksums
        run: |
          cd dist
          sha256sum ${{ env.CLI_NAME }}-* > checksums.txt
          cat checksums.txt

      - name: Upload CLI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cli-binaries
          path: |
            dist/${{ env.CLI_NAME }}-*
            dist/checksums.txt

  release-operator:
    name: Release Operator Manifests
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [promote-images]
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Derive tag name and version
        id: version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Generate deployment manifests
        run: |
          make build-installer \
            IMG=${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/kibaship:v-${{ steps.version.outputs.version }} \
            IMG_APISERVER=${{ env.REGISTRY }}/${{ env.DOCKER_HUB_USERNAME }}/kibaship-apiserver:v-${{ steps.version.outputs.version }}

      - name: Upload deployment manifests
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifests

      - name: Download CLI artifacts
        uses: actions/download-artifact@v4
        with:
          name: cli-binaries
          path: dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          name: KibaShip ${{ steps.version.outputs.tag_name }}
          files: |
            dist/install.yaml
            dist/${{ env.CLI_NAME }}-linux-amd64
            dist/${{ env.CLI_NAME }}-linux-arm64
            dist/${{ env.CLI_NAME }}-darwin-amd64
            dist/${{ env.CLI_NAME }}-darwin-arm64
            dist/${{ env.CLI_NAME }}-windows-amd64.exe
            dist/checksums.txt
          body: |
            ## KibaShip ${{ steps.version.outputs.tag_name }}

            ### Operator Installation

            Deploy the operator to your Kubernetes cluster:

            ```bash
            kubectl apply -f https://github.com/kibamail/kibaship/releases/download/${{ steps.version.outputs.tag_name }}/install.yaml
            ```

            ### Configuration

            Create the required ConfigMap with your configuration:

            ```bash
            kubectl create configmap kibaship-config \
              -n kibaship \
              --from-literal=ingress.domain=your-domain.com \
              --from-literal=ingress.gateway_classname=cilium \
              --from-literal=certs.email=acme@your-domain.com \
              --from-literal=certs.env=staging \
              --from-literal=webhooks.url=https://webhook.your-domain.com
            ```

            ### Container Images

            The following container images are available for this release:
            - `docker.io/kibamail/kibaship:v-${{ steps.version.outputs.version }}`
            - `docker.io/kibamail/kibaship-apiserver:v-${{ steps.version.outputs.version }}`

            ### CLI Tool

            Download the KibaShip CLI (minimal version with help screen and version info):
            **Linux (AMD64)**
            ```bash
            curl -L -o kibaship https://github.com/kibamail/kibaship/releases/download/${{ steps.version.outputs.tag_name }}/kibaship-linux-amd64
            chmod +x kibaship
            sudo mv kibaship /usr/local/bin/
            ```

            **Linux (ARM64)**
            ```bash
            curl -L -o kibaship https://github.com/kibamail/kibaship/releases/download/${{ steps.version.outputs.tag_name }}/kibaship-linux-arm64
            chmod +x kibaship
            sudo mv kibaship /usr/local/bin/
            ```

            **macOS (Intel)**
            ```bash
            curl -L -o kibaship https://github.com/kibamail/kibaship/releases/download/${{ steps.version.outputs.tag_name }}/kibaship-darwin-amd64
            chmod +x kibaship
            sudo mv kibaship /usr/local/bin/
            ```

            **macOS (Apple Silicon)**
            ```bash
            curl -L -o kibaship https://github.com/kibamail/kibaship/releases/download/${{ steps.version.outputs.tag_name }}/kibaship-darwin-arm64
            chmod +x kibaship
            sudo mv kibaship /usr/local/bin/
            ```

            **Windows (AMD64)**
            ```powershell
            curl -L -o kibaship.exe https://github.com/kibamail/kibaship/releases/download/${{ steps.version.outputs.tag_name }}/kibaship-windows-amd64.exe
            ```

            ### Verification

            Verify the downloaded CLI binary with checksums:
            ```bash
            curl -L -o checksums.txt https://github.com/kibamail/kibaship/releases/download/${{ steps.version.outputs.tag_name }}/checksums.txt
            sha256sum -c checksums.txt --ignore-missing
            ```

            ### What's in this release

            **CLI Tool:**
            - Display help screen with beautiful ASCII art banner
            - Show version information
            - Minimal CLI foundation for future development

            Version: `${{ steps.version.outputs.version }}`
          generate_release_notes: true
