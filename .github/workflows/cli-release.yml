name: Build and Release CLI

on:
  push:
    tags:
      - "v*"

env:
  CLI_NAME: kibaship

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Derive tag name and version
        id: version
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build CLI binaries for multiple platforms
        run: |
          # Create dist directory
          mkdir -p dist

          # Build for Linux AMD64
          GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/${{ env.CLI_NAME }}-linux-amd64 ./cmd/cli

          # Build for Linux ARM64
          GOOS=linux GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/${{ env.CLI_NAME }}-linux-arm64 ./cmd/cli

          # Build for macOS AMD64
          GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/${{ env.CLI_NAME }}-darwin-amd64 ./cmd/cli

          # Build for macOS ARM64 (Apple Silicon)
          GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/${{ env.CLI_NAME }}-darwin-arm64 ./cmd/cli

          # Build for Windows AMD64
          GOOS=windows GOARCH=amd64 go build -ldflags "-X main.version=${{ steps.version.outputs.version }}" -o dist/${{ env.CLI_NAME }}-windows-amd64.exe ./cmd/cli

          # Make binaries executable
          chmod +x dist/${{ env.CLI_NAME }}-*

      - name: Generate checksums
        run: |
          cd dist
          sha256sum ${{ env.CLI_NAME }}-* > checksums.txt
          cat checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          name: KibaShip CLI ${{ steps.version.outputs.tag_name }}
          files: |
            dist/${{ env.CLI_NAME }}-linux-amd64
            dist/${{ env.CLI_NAME }}-linux-arm64
            dist/${{ env.CLI_NAME }}-darwin-amd64
            dist/${{ env.CLI_NAME }}-darwin-arm64
            dist/${{ env.CLI_NAME }}-windows-amd64.exe
            dist/checksums.txt
          body: |
            ## KibaShip CLI ${{ steps.version.outputs.tag_name }}

            ### Installation

            Download the CLI for your platform:

            **Linux (AMD64)**
            ```bash
            curl -L -o kibaship https://github.com/kibamail/kibaship-operator/releases/download/${{ steps.version.outputs.tag_name }}/kibaship-linux-amd64
            chmod +x kibaship
            sudo mv kibaship /usr/local/bin/
            ```

            **Linux (ARM64)**
            ```bash
            curl -L -o kibaship https://github.com/kibamail/kibaship-operator/releases/download/${{ steps.version.outputs.tag_name }}/kibaship-linux-arm64
            chmod +x kibaship
            sudo mv kibaship /usr/local/bin/
            ```

            **macOS (Intel)**
            ```bash
            curl -L -o kibaship https://github.com/kibamail/kibaship-operator/releases/download/${{ steps.version.outputs.tag_name }}/kibaship-darwin-amd64
            chmod +x kibaship
            sudo mv kibaship /usr/local/bin/
            ```

            **macOS (Apple Silicon)**
            ```bash
            curl -L -o kibaship https://github.com/kibamail/kibaship-operator/releases/download/${{ steps.version.outputs.tag_name }}/kibaship-darwin-arm64
            chmod +x kibaship
            sudo mv kibaship /usr/local/bin/
            ```

            **Windows (AMD64)**
            ```powershell
            curl -L -o kibaship.exe https://github.com/kibamail/kibaship-operator/releases/download/${{ steps.version.outputs.tag_name }}/kibaship-windows-amd64.exe
            ```

            ### Verification

            Verify the downloaded binary with the checksums:
            ```bash
            curl -L -o checksums.txt https://github.com/kibamail/kibaship-operator/releases/download/${{ steps.version.outputs.tag_name }}/checksums.txt
            sha256sum -c checksums.txt --ignore-missing
            ```

            ### What's in this release

            This CLI helps you manage local Kubernetes clusters for KibaShip development:
            - Create and destroy development clusters
            - Install required infrastructure (Cilium, Cert-Manager, Tekton, etc.)
            - Manage cluster lifecycle

            Version: `${{ steps.version.outputs.version }}`
          generate_release_notes: true
