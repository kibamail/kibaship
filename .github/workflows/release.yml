name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: kibamail/kibaship-operator

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version from tag
      id: version
      run: |
        # Debug info
        echo "GITHUB_REF: ${GITHUB_REF}"
        echo "GITHUB_REF_NAME: ${GITHUB_REF_NAME}"
        echo "GITHUB_SHA: ${GITHUB_SHA}"

        # Extract version from tag, ensuring it's properly formatted
        if [[ "${GITHUB_REF}" =~ ^refs/tags/v(.+)$ ]]; then
          VERSION="${BASH_REMATCH[1]}"
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "‚úÖ Extracted version: ${VERSION}"
        else
          echo "‚ùå Error: Invalid tag format: ${GITHUB_REF}"
          exit 1
        fi

    - name: Verify version consistency
      run: |
        MAKEFILE_VERSION=$(grep "^VERSION ?=" Makefile | cut -d' ' -f3)
        TAG_VERSION="${{ steps.version.outputs.VERSION }}"

        if [ "$MAKEFILE_VERSION" != "$TAG_VERSION" ]; then
          echo "‚ùå Version mismatch!"
          echo "   Makefile VERSION: $MAKEFILE_VERSION"
          echo "   Git tag version:  $TAG_VERSION"
          exit 1
        fi

        echo "‚úÖ Version consistency verified: $TAG_VERSION"

    - name: Run tests
      run: |
        make setup-envtest
        make test

    - name: Run linting
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        skip-cache: true

    - name: Build project
      run: make build

    - name: Generate manifests
      run: |
        make manifests
        make build-installer

    - name: Package Helm Chart
      run: |
        mkdir -p charts
        helm package deploy/helm/kibaship-operator/ --destination ./charts/

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.VERSION }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        labels: |
          org.opencontainers.image.title=KibaShip Operator
          org.opencontainers.image.description=Kubernetes operator for managing KibaShip applications and domains
          org.opencontainers.image.url=https://github.com/kibamail/kibaship-operator
          org.opencontainers.image.source=https://github.com/kibamail/kibaship-operator
          org.opencontainers.image.version=v${{ steps.version.outputs.VERSION }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          org.opencontainers.image.revision=${{ github.sha }}

    - name: Generate release notes
      id: release_notes
      run: |
        cat << 'EOF' > release_notes.md
        ## KibaShip Operator v${{ steps.version.outputs.VERSION }}

        ### üöÄ Installation

        **Using kubectl:**
        ```bash
        kubectl apply -f https://github.com/kibamail/kibaship-operator/releases/download/v${{ steps.version.outputs.VERSION }}/install.yaml
        ```

        **Using Helm:**
        ```bash
        helm repo add kibaship https://helm.kibaship.com
        helm install kibaship-operator kibaship/kibaship-operator
        ```

        ### üì¶ Container Image
        ```bash
        docker pull ghcr.io/kibamail/kibaship-operator:v${{ steps.version.outputs.VERSION }}
        ```

        ### üîß What's Included
        - ‚úÖ Complete KibaShip Operator installation
        - ‚úÖ Custom Resource Definitions (CRDs) for Projects, Applications, Deployments, ApplicationDomains
        - ‚úÖ RBAC configuration with minimal permissions
        - ‚úÖ Admission webhooks for resource validation
        - ‚úÖ Tekton Tasks for GitRepository application deployments
        - ‚úÖ Integration with cert-manager, MySQL Operator, and Valkey Operator

        ### üõ†Ô∏è System Requirements
        - Kubernetes 1.19+
        - Tekton Pipelines v0.47.0+ (for GitRepository applications)
        - cert-manager v1.0+ (for TLS certificates)

        ### üìö Documentation
        - [Installation Guide](https://github.com/kibamail/kibaship-operator#installation)
        - [API Reference](https://github.com/kibamail/kibaship-operator/tree/main/api)
        - [Examples](https://github.com/kibamail/kibaship-operator/tree/main/config/samples)

        For detailed changelog and upgrade notes, see the [commit history](https://github.com/kibamail/kibaship-operator/compare/v${{ steps.version.outputs.VERSION }}...HEAD).
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        body_path: release_notes.md
        files: |
          dist/install.yaml
          charts/*.tgz
        generate_release_notes: true
        make_latest: true
        draft: false
        prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}

    - name: Verify release
      run: |
        echo "üéâ Release v${{ steps.version.outputs.VERSION }} completed successfully!"
        echo ""
        echo "üì¶ Container Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ steps.version.outputs.VERSION }}"
        echo "üìã kubectl Install: kubectl apply -f https://github.com/kibamail/kibaship-operator/releases/download/v${{ steps.version.outputs.VERSION }}/install.yaml"
        echo "‚õµ Helm Install: helm install kibaship-operator https://github.com/kibamail/kibaship-operator/releases/download/v${{ steps.version.outputs.VERSION }}/kibaship-operator-${{ steps.version.outputs.VERSION }}.tgz"
        echo "üîó Release Page: https://github.com/kibamail/kibaship-operator/releases/tag/v${{ steps.version.outputs.VERSION }}"

  # Optional: Update Helm chart repository (uncomment if you have a Helm repo)
  # helm-release:
  #   needs: release
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout helm-charts repo
  #     uses: actions/checkout@v4
  #     with:
  #       repository: kibamail/helm-charts
  #       token: ${{ secrets.HELM_REPO_TOKEN }}
  #       path: helm-charts
  #
  #   - name: Update chart repository
  #     run: |
  #       # Copy updated chart to helm repo
  #       # Update index.yaml
  #       # Commit and push changes