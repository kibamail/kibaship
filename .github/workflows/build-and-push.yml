name: Build and Push Container Images

on:
  workflow_run:
    workflows:
      - Tests
      - E2E Tests
      - Lint
    types:
      - completed

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: kibamail/kibaship-operator

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.workflow_run.ref }}
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod

    - name: Run tests
      run: |
        make test

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      if: ${{ startsWith(github.event.workflow_run.ref, 'refs/tags/v') || startsWith(github.event.workflow_run.ref, 'refs/heads/main') }}
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      env:
        GITHUB_REF: ${{ github.event.workflow_run.ref }}
        GITHUB_SHA: ${{ github.event.workflow_run.head_sha }}
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,format=short,prefix=sha-

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ startsWith(github.event.workflow_run.ref, 'refs/tags/v') || startsWith(github.event.workflow_run.ref, 'refs/heads/main') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate deployment manifests
      if: ${{ startsWith(github.event.workflow_run.ref, 'refs/tags/v') }}
      run: |
        make build-installer IMG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

    - name: Upload deployment manifests
      if: ${{ startsWith(github.event.workflow_run.ref, 'refs/tags/v') || startsWith(github.event.workflow_run.ref, 'refs/heads/main') }}
      uses: actions/upload-artifact@v4
      with:
        name: deployment-manifests
        path: dist/install.yaml

  release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.event.workflow_run.ref, 'refs/tags/v') }}
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.workflow_run.ref }}
        fetch-depth: 0

    - name: Download deployment manifests
      uses: actions/download-artifact@v4
      with:
        name: deployment-manifests
        path: dist/

    - name: Derive tag name
      id: refname
      run: echo "name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      env:
        GITHUB_REF: ${{ github.event.workflow_run.ref }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.refname.outputs.name }}
        target_commitish: ${{ github.event.workflow_run.head_sha }}
        files: |
          dist/install.yaml
        body: |
          ## KibaShip Operator ${{ steps.refname.outputs.name }}

          ### Installation

          Deploy the operator to your Kubernetes cluster:

          ```bash
          kubectl apply -f https://github.com/kibamail/kibaship-operator/releases/download/${{ steps.refname.outputs.name }}/install.yaml
          ```

          ### Configuration

          Set the required environment variables in the operator deployment:

          ```bash
          kubectl set env deployment/kibaship-operator-controller-manager \
            -n kibaship-operator-system \
            KIBASHIP_OPERATOR_DOMAIN=your-domain.com \
            KIBASHIP_OPERATOR_DEFAULT_PORT=3000
          ```

          ### Container Image

          The container image for this release is available at:
          `ghcr.io/kibamail/kibaship-operator:${{ steps.refname.outputs.name }}`
        generate_release_notes: true