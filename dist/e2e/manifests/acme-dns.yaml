apiVersion: v1
data:
  config.cfg: |
    [general]
    # DNS server listen address
    listen = ":53"
    # Protocol (both for both UDP and TCP)
    protocol = "both"
    # Domain name to serve DNS records for (must be configured in your DNS)
    # This should be set to the domain where acme-dns will be authoritative
    domain = "acme.example.com"
    # SOA record configuration
    nsname = "ns1.acme.example.com"
    nsadmin = "admin.example.com"
    # Record configuration
    records = [
        # A record for the DNS server itself
        "acme.example.com. A 1.2.3.4",
        # NS record
        "acme.example.com. NS ns1.acme.example.com.",
    ]

    [database]
    # Database engine (sqlite3 or postgres)
    engine = "sqlite3"
    # SQLite database path
    connection = "/var/lib/acme-dns/acme-dns.db"

    [api]
    # HTTP API listen address
    listen = ":80"
    # CORS origin setting (use "*" for development, specific origins for production)
    cors_origins = ["*"]
    # Use TLS for API (false since we're behind a service)
    tls = "none"
    # Disable registration endpoint (set to true to prevent unauthorized registrations)
    disable_registration = false

    [logconfig]
    # Log level (trace, debug, info, warning, error, fatal, panic)
    loglevel = "info"
    # Log format (json or text)
    logtype = "json"
kind: ConfigMap
metadata:
  labels:
    app: acme-dns
    app.kubernetes.io/component: dns
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: acme-dns
    app.kubernetes.io/part-of: kibaship
  name: acme-dns-config
  namespace: kibaship
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: acme-dns
    app.kubernetes.io/component: dns
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: acme-dns
    app.kubernetes.io/part-of: kibaship
  name: acme-dns
  namespace: kibaship
spec:
  ports:
  - name: dns-udp
    port: 53
    protocol: UDP
    targetPort: dns-udp
  - name: dns-tcp
    port: 53
    protocol: TCP
    targetPort: dns-tcp
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app: acme-dns
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/part-of: kibaship
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: acme-dns
    app.kubernetes.io/component: dns
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: acme-dns
    app.kubernetes.io/part-of: kibaship
  name: acme-dns-data
  namespace: kibaship
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: kibaship-replica-2
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: acme-dns
    app.kubernetes.io/component: dns
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/name: acme-dns
    app.kubernetes.io/part-of: kibaship
  name: acme-dns
  namespace: kibaship
spec:
  replicas: 2
  selector:
    matchLabels:
      app: acme-dns
      app.kubernetes.io/managed-by: kustomize
      app.kubernetes.io/part-of: kibaship
  template:
    metadata:
      labels:
        app: acme-dns
        app.kubernetes.io/component: dns
        app.kubernetes.io/managed-by: kustomize
        app.kubernetes.io/name: acme-dns
        app.kubernetes.io/part-of: kibaship
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: acme-dns
                  app.kubernetes.io/managed-by: kustomize
                  app.kubernetes.io/part-of: kibaship
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - env:
        - name: ACMEDNS_CONFIG
          value: /etc/acme-dns/config.cfg
        image: joohoi/acme-dns:latest
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        name: acme-dns
        ports:
        - containerPort: 53
          name: dns-udp
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        - containerPort: 80
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        volumeMounts:
        - mountPath: /etc/acme-dns
          name: config
          readOnly: true
        - mountPath: /var/lib/acme-dns
          name: data
      securityContext:
        fsGroup: 1000
      volumes:
      - configMap:
          name: acme-dns-config
        name: config
      - name: data
        persistentVolumeClaim:
          claimName: acme-dns-data
