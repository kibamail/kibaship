#!/bin/bash
set -e

# Kibaship kind Cluster Manifest Preparation Script
# This script downloads and prepares all Kubernetes manifests needed for e2e testing
# All manifests are saved in kind/manifests/ for quick cluster setup

echo "=========================================="
echo "Preparing Kibaship kind Manifests"
echo "=========================================="

# Color output helpers
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Get script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
MANIFESTS_DIR="${SCRIPT_DIR}/manifests"

# Create manifests directory
mkdir -p "${MANIFESTS_DIR}"

################################################################################
# CILIUM - v1.18.2
# Generate Cilium manifest from Helm chart
################################################################################

log_info "Generating Cilium manifest from Helm chart..."

# Ensure helm is installed
if ! command -v helm &> /dev/null; then
    log_error "Helm is not installed. Please install helm first."
    exit 1
fi

# Add Cilium repo if not present
helm repo add cilium https://helm.cilium.io 2>/dev/null || true
helm repo update cilium

# Generate Cilium manifest
helm template cilium cilium/cilium \
  --version 1.18.2 \
  --namespace kube-system \
  --set gatewayAPI.enabled=true \
  --set gatewayAPI.hostNetwork.enabled=true \
  --set-string 'gatewayAPI.hostNetwork.nodes.matchLabels.ingress\.kibaship\.com/ready=true' \
  --set gatewayAPI.enableAlpn=true \
  --set gatewayAPI.enableAppProtocol=true \
  --set operator.replicas=2 \
  --set kubeProxyReplacement=true \
  --set tunnelProtocol=vxlan \
  --set gatewayAPI.enableProxyProtocol=true \
  --set ipam.mode=kubernetes \
  --set loadBalancer.mode=snat \
  --set bpf.masquerade=true \
  --set cgroup.autoMount.enabled=false \
  --set cgroup.hostRoot=/sys/fs/cgroup \
  > "${MANIFESTS_DIR}/cilium-v-1.18.2.yaml"

log_success "Cilium manifest generated: ${MANIFESTS_DIR}/cilium-v-1.18.2.yaml"

################################################################################
# GATEWAY API - v1.2.0
# Download and combine all Gateway API CRDs
################################################################################

log_info "Downloading Gateway API CRDs..."

GATEWAY_API_VERSION="v1.2.0"
GATEWAY_API_BASE="https://raw.githubusercontent.com/kubernetes-sigs/gateway-api/${GATEWAY_API_VERSION}/config/crd"

# Array of CRD files to download
GATEWAY_CRDS=(
    "standard/gateway.networking.k8s.io_gatewayclasses.yaml"
    "standard/gateway.networking.k8s.io_gateways.yaml"
    "standard/gateway.networking.k8s.io_httproutes.yaml"
    "standard/gateway.networking.k8s.io_referencegrants.yaml"
    "standard/gateway.networking.k8s.io_grpcroutes.yaml"
    "experimental/gateway.networking.k8s.io_tlsroutes.yaml"
)

# Download and combine CRDs
GATEWAY_OUTPUT="${MANIFESTS_DIR}/gateway-crds-v-1.2.0.yaml"
> "${GATEWAY_OUTPUT}" # Clear file

echo "# Gateway API CRDs ${GATEWAY_API_VERSION}" >> "${GATEWAY_OUTPUT}"
echo "# Generated by kind/prepare.sh" >> "${GATEWAY_OUTPUT}"
echo "---" >> "${GATEWAY_OUTPUT}"

for crd in "${GATEWAY_CRDS[@]}"; do
    log_info "Downloading ${crd}..."
    curl -fsSL "${GATEWAY_API_BASE}/${crd}" >> "${GATEWAY_OUTPUT}"
    echo "---" >> "${GATEWAY_OUTPUT}"
done

log_success "Gateway API CRDs saved: ${GATEWAY_OUTPUT}"

################################################################################
# CERT-MANAGER - v1.18.2
# Download cert-manager manifest
################################################################################

log_info "Downloading cert-manager manifest..."

CERT_MANAGER_VERSION="v1.18.2"
CERT_MANAGER_URL="https://github.com/cert-manager/cert-manager/releases/download/${CERT_MANAGER_VERSION}/cert-manager.yaml"
CERT_MANAGER_OUTPUT="${MANIFESTS_DIR}/cert-manager-v-1.18.2.yaml"

curl -fsSL "${CERT_MANAGER_URL}" -o "${CERT_MANAGER_OUTPUT}"

log_success "cert-manager manifest saved: ${CERT_MANAGER_OUTPUT}"

################################################################################
# PROMETHEUS OPERATOR - v0.77.1
# Download Prometheus Operator bundle
################################################################################

log_info "Downloading Prometheus Operator bundle..."

PROMETHEUS_VERSION="v0.77.1"
PROMETHEUS_URL="https://github.com/prometheus-operator/prometheus-operator/releases/download/${PROMETHEUS_VERSION}/bundle.yaml"
PROMETHEUS_OUTPUT="${MANIFESTS_DIR}/prometheus-operator-v-0.77.1.yaml"

curl -fsSL "${PROMETHEUS_URL}" -o "${PROMETHEUS_OUTPUT}"

log_success "Prometheus Operator bundle saved: ${PROMETHEUS_OUTPUT}"

################################################################################
# TEKTON PIPELINES - v1.4.0
# Download Tekton Pipelines manifest
################################################################################

log_info "Downloading Tekton Pipelines manifest..."

TEKTON_VERSION="v1.4.0"
TEKTON_URL="https://storage.googleapis.com/tekton-releases/pipeline/previous/${TEKTON_VERSION}/release.yaml"
TEKTON_OUTPUT="${MANIFESTS_DIR}/tekton-pipelines-v-1.4.0.yaml"

curl -fsSL "${TEKTON_URL}" -o "${TEKTON_OUTPUT}"

log_success "Tekton Pipelines manifest saved: ${TEKTON_OUTPUT}"

################################################################################
# VALKEY OPERATOR - v0.0.59
# Download Valkey Operator manifest
################################################################################

log_info "Downloading Valkey Operator manifest..."

VALKEY_VERSION="v0.0.59"
VALKEY_URL="https://github.com/hyperspike/valkey-operator/releases/download/${VALKEY_VERSION}/install.yaml"
VALKEY_OUTPUT="${MANIFESTS_DIR}/valkey-operator-v-0.0.59.yaml"

curl -fsSL "${VALKEY_URL}" -o "${VALKEY_OUTPUT}"

log_success "Valkey Operator manifest saved: ${VALKEY_OUTPUT}"

################################################################################
# MYSQL OPERATOR - v9.4.0-2.2.5
# Download MySQL Operator CRDs and operator
################################################################################

log_info "Downloading MySQL Operator manifests..."

MYSQL_VERSION="9.4.0-2.2.5"
MYSQL_BASE_URL="https://raw.githubusercontent.com/mysql/mysql-operator/${MYSQL_VERSION}/deploy"
MYSQL_OUTPUT="${MANIFESTS_DIR}/mysql-operator-v-9.4.0-2.2.5.yaml"

# Combine CRDs and operator into single file
> "${MYSQL_OUTPUT}" # Clear file

echo "# MySQL Operator ${MYSQL_VERSION}" >> "${MYSQL_OUTPUT}"
echo "# Generated by kind/prepare.sh" >> "${MYSQL_OUTPUT}"
echo "---" >> "${MYSQL_OUTPUT}"

# Download CRDs
log_info "Downloading MySQL Operator CRDs..."
curl -fsSL "${MYSQL_BASE_URL}/deploy-crds.yaml" >> "${MYSQL_OUTPUT}"
echo "---" >> "${MYSQL_OUTPUT}"

# Download operator
log_info "Downloading MySQL Operator deployment..."
curl -fsSL "${MYSQL_BASE_URL}/deploy-operator.yaml" >> "${MYSQL_OUTPUT}"

log_success "MySQL Operator manifests saved: ${MYSQL_OUTPUT}"

################################################################################
# STORAGE CLASSES
# Create storage classes manifest for testing
################################################################################

log_info "Creating storage classes manifest..."

STORAGE_OUTPUT="${MANIFESTS_DIR}/storage-classes.yaml"

cat > "${STORAGE_OUTPUT}" <<'EOF'
# Storage Classes for Kibaship E2E Testing
# These storage classes use the default provisioner
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: storage-replica-1
  annotations:
    description: "Test environment storage class - replica 1"
provisioner: rancher.io/local-path
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: false
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: storage-replica-2
  annotations:
    description: "Test environment storage class - replica 2"
provisioner: rancher.io/local-path
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: false
EOF

log_success "Storage classes manifest saved: ${STORAGE_OUTPUT}"

################################################################################
# SUMMARY
################################################################################

echo ""
log_success "=========================================="
log_success "All manifests prepared successfully!"
log_success "=========================================="
echo ""
log_info "Manifests directory: ${MANIFESTS_DIR}"
echo ""
log_info "Generated files:"
echo "  - cilium-v-1.18.2.yaml"
echo "  - gateway-crds-v-1.2.0.yaml"
echo "  - cert-manager-v-1.18.2.yaml"
echo "  - prometheus-operator-v-0.77.1.yaml"
echo "  - tekton-pipelines-v-1.4.0.yaml"
echo "  - valkey-operator-v-0.0.59.yaml"
echo "  - mysql-operator-v-9.4.0-2.2.5.yaml"
echo "  - storage-classes.yaml"
echo ""
log_info "Total size: $(du -sh ${MANIFESTS_DIR} | cut -f1)"
echo ""
log_info "Next steps:"
echo "  1. Review the generated manifests in ${MANIFESTS_DIR}"
echo "  2. Use these manifests to quickly set up your kind cluster"
echo "  3. Apply them in order during cluster creation"
